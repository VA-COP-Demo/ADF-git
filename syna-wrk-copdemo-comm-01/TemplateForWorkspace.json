{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syna-wrk-copdemo-comm-01"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer1_onprem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1_onprem'"
		},
		"syna-wrk-copdemo-comm-01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syna-wrk-copdemo-comm-01-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlacopdemocomm02.dfs.core.windows.net"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-copdemo-comm-01.vault.azure.net/"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureadmin"
		},
		"SqlServer1_onprem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureadmin"
		},
		"healthdatacovid19_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://healthdata.gov/resource/6xf2-c3ie.json"
		},
		"syna-wrk-copdemo-comm-01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlacopdemocomm02.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/HeathDataAPI-ingest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['state']"
										},
										"sink": {
											"name": "state"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_yes']"
										},
										"sink": {
											"name": "critical_staffing_shortage_today_yes"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_no']"
										},
										"sink": {
											"name": "critical_staffing_shortage_today_no"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_not_reported']"
										},
										"sink": {
											"name": "critical_staffing_shortage_today_not_reported"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_yes']"
										},
										"sink": {
											"name": "critical_staffing_shortage_anticipated_within_week_yes"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_no']"
										},
										"sink": {
											"name": "critical_staffing_shortage_anticipated_within_week_no"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_not_reported']"
										},
										"sink": {
											"name": "critical_staffing_shortage_anticipated_within_week_not_reported"
										}
									},
									{
										"source": {
											"path": "$['hospital_onset_covid']"
										},
										"sink": {
											"name": "hospital_onset_covid"
										}
									},
									{
										"source": {
											"path": "$['hospital_onset_covid_coverage']"
										},
										"sink": {
											"name": "hospital_onset_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds']"
										},
										"sink": {
											"name": "inpatient_beds"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_coverage']"
										},
										"sink": {
											"name": "inpatient_beds_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used']"
										},
										"sink": {
											"name": "inpatient_beds_used"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_coverage']"
										},
										"sink": {
											"name": "inpatient_beds_used_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_covid']"
										},
										"sink": {
											"name": "inpatient_beds_used_covid"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_covid_coverage']"
										},
										"sink": {
											"name": "inpatient_beds_used_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_confirmed']"
										},
										"sink": {
											"name": "previous_day_admission_adult_covid_confirmed"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_confirmed_coverage']"
										},
										"sink": {
											"name": "previous_day_admission_adult_covid_confirmed_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_suspected']"
										},
										"sink": {
											"name": "previous_day_admission_adult_covid_suspected"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_suspected_coverage']"
										},
										"sink": {
											"name": "previous_day_admission_adult_covid_suspected_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_confirmed']"
										},
										"sink": {
											"name": "previous_day_admission_pediatric_covid_confirmed"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_confirmed_coverage']"
										},
										"sink": {
											"name": "previous_day_admission_pediatric_covid_confirmed_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_suspected']"
										},
										"sink": {
											"name": "previous_day_admission_pediatric_covid_suspected"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_suspected_coverage']"
										},
										"sink": {
											"name": "previous_day_admission_pediatric_covid_suspected_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_adult_icu_bed_occupancy']"
										},
										"sink": {
											"name": "staffed_adult_icu_bed_occupancy"
										}
									},
									{
										"source": {
											"path": "$['staffed_adult_icu_bed_occupancy_coverage']"
										},
										"sink": {
											"name": "staffed_adult_icu_bed_occupancy_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_and_suspected_covid']"
										},
										"sink": {
											"name": "staffed_icu_adult_patients_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"name": "staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_covid']"
										},
										"sink": {
											"name": "staffed_icu_adult_patients_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_covid_coverage']"
										},
										"sink": {
											"name": "staffed_icu_adult_patients_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_and_suspected_covid']"
										},
										"sink": {
											"name": "total_adult_patients_hospitalized_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"name": "total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_covid']"
										},
										"sink": {
											"name": "total_adult_patients_hospitalized_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_covid_coverage']"
										},
										"sink": {
											"name": "total_adult_patients_hospitalized_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_and_suspected_covid']"
										},
										"sink": {
											"name": "total_pediatric_patients_hospitalized_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"name": "total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_covid']"
										},
										"sink": {
											"name": "total_pediatric_patients_hospitalized_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_covid_coverage']"
										},
										"sink": {
											"name": "total_pediatric_patients_hospitalized_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_staffed_adult_icu_beds']"
										},
										"sink": {
											"name": "total_staffed_adult_icu_beds"
										}
									},
									{
										"source": {
											"path": "$['total_staffed_adult_icu_beds_coverage']"
										},
										"sink": {
											"name": "total_staffed_adult_icu_beds_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization']"
										},
										"sink": {
											"name": "inpatient_beds_utilization"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_coverage']"
										},
										"sink": {
											"name": "inpatient_beds_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_numerator']"
										},
										"sink": {
											"name": "inpatient_beds_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_denominator']"
										},
										"sink": {
											"name": "inpatient_beds_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid']"
										},
										"sink": {
											"name": "percent_of_inpatients_with_covid"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_coverage']"
										},
										"sink": {
											"name": "percent_of_inpatients_with_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_numerator']"
										},
										"sink": {
											"name": "percent_of_inpatients_with_covid_numerator"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_denominator']"
										},
										"sink": {
											"name": "percent_of_inpatients_with_covid_denominator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization']"
										},
										"sink": {
											"name": "inpatient_bed_covid_utilization"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_coverage']"
										},
										"sink": {
											"name": "inpatient_bed_covid_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_numerator']"
										},
										"sink": {
											"name": "inpatient_bed_covid_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_denominator']"
										},
										"sink": {
											"name": "inpatient_bed_covid_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization']"
										},
										"sink": {
											"name": "adult_icu_bed_covid_utilization"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_coverage']"
										},
										"sink": {
											"name": "adult_icu_bed_covid_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_numerator']"
										},
										"sink": {
											"name": "adult_icu_bed_covid_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_denominator']"
										},
										"sink": {
											"name": "adult_icu_bed_covid_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization']"
										},
										"sink": {
											"name": "adult_icu_bed_utilization"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_coverage']"
										},
										"sink": {
											"name": "adult_icu_bed_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_numerator']"
										},
										"sink": {
											"name": "adult_icu_bed_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_denominator']"
										},
										"sink": {
											"name": "adult_icu_bed_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['reporting_cutoff_start']"
										},
										"sink": {
											"name": "reporting_cutoff_start"
										}
									},
									{
										"source": {
											"path": "$['geocoded_state']['type']"
										},
										"sink": {
											"name": "type"
										}
									},
									{
										"source": {
											"path": "$['geocoded_state']['coordinates'][0]"
										},
										"sink": {
											"name": "items"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "heathdataApiCovid19JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csvformatehhs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-10T14:47:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/heathdataApiCovid19JSON')]",
				"[concat(variables('workspaceId'), '/datasets/csvformatehhs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL-OnPrem-Copy-Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dynamicSQLTableSource",
											"type": "DatasetReference",
											"parameters": {
												"cw_schema": {
													"value": "@item().source.schema",
													"type": "Expression"
												},
												"cw_table": {
													"value": "@item().source.table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDatasetLake",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": {
													"value": "@item().destination.fileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "array",
						"defaultValue": [
							{
								"source": {
									"schema": "dbo",
									"table": "__MigrationHistory"
								},
								"destination": {
									"fileName": "dbo__MigrationHistory"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "__TransactionHistory"
								},
								"destination": {
									"fileName": "dbo__TransactionHistory"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclDataMartRequestTypes"
								},
								"destination": {
									"fileName": "dboAclDataMartRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclDataMarts"
								},
								"destination": {
									"fileName": "dboAclDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclEntries"
								},
								"destination": {
									"fileName": "dboAclEntries"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclGlobal"
								},
								"destination": {
									"fileName": "dboAclGlobal"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclGlobalFieldOptions"
								},
								"destination": {
									"fileName": "dboAclGlobalFieldOptions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclGroups"
								},
								"destination": {
									"fileName": "dboAclGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclOrganizationDataMarts"
								},
								"destination": {
									"fileName": "dboAclOrganizationDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclOrganizations"
								},
								"destination": {
									"fileName": "dboAclOrganizations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclOrganizationUsers"
								},
								"destination": {
									"fileName": "dboAclOrganizationUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectDataMartRequestTypes"
								},
								"destination": {
									"fileName": "dboAclProjectDataMartRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectDataMarts"
								},
								"destination": {
									"fileName": "dboAclProjectDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectFieldOptions"
								},
								"destination": {
									"fileName": "dboAclProjectFieldOptions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectOrganizations"
								},
								"destination": {
									"fileName": "dboAclProjectOrganizations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectRequestTypes"
								},
								"destination": {
									"fileName": "dboAclProjectRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjectRequestTypeWorkflowActivities"
								},
								"destination": {
									"fileName": "dboAclProjectRequestTypeWorkflowActivities"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclProjects"
								},
								"destination": {
									"fileName": "dboAclProjects"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclRegistries"
								},
								"destination": {
									"fileName": "dboAclRegistries"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclRequests"
								},
								"destination": {
									"fileName": "dboAclRequests"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclRequestSharedFolders"
								},
								"destination": {
									"fileName": "dboAclRequestSharedFolders"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclRequestTypes"
								},
								"destination": {
									"fileName": "dboAclRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclTemplates"
								},
								"destination": {
									"fileName": "dboAclTemplates"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AclUsers"
								},
								"destination": {
									"fileName": "dboAclUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Activities"
								},
								"destination": {
									"fileName": "dboActivities"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AuditEvents"
								},
								"destination": {
									"fileName": "dboAuditEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "AuditPropertyValues"
								},
								"destination": {
									"fileName": "dboAuditPropertyValues"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "CommentReferences"
								},
								"destination": {
									"fileName": "dboCommentReferences"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Comments"
								},
								"destination": {
									"fileName": "dboComments"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataAdapterDetailTerms"
								},
								"destination": {
									"fileName": "dboDataAdapterDetailTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataAvailabilityPeriod"
								},
								"destination": {
									"fileName": "dboDataAvailabilityPeriod"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataAvailabilityPeriodCategory"
								},
								"destination": {
									"fileName": "dboDataAvailabilityPeriodCategory"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMartAvailabilityPeriods"
								},
								"destination": {
									"fileName": "dboDataMartAvailabilityPeriods"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMartAvailabilityPeriods_v2"
								},
								"destination": {
									"fileName": "dboDataMartAvailabilityPeriods_v2"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMartEvents"
								},
								"destination": {
									"fileName": "dboDataMartEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMartInstalledModels"
								},
								"destination": {
									"fileName": "dboDataMartInstalledModels"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMarts"
								},
								"destination": {
									"fileName": "dboDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataMartTypes"
								},
								"destination": {
									"fileName": "dboDataMartTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataModels"
								},
								"destination": {
									"fileName": "dboDataModels"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DataModelSupportedTerms"
								},
								"destination": {
									"fileName": "dboDataModelSupportedTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Demographics"
								},
								"destination": {
									"fileName": "dboDemographics"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "DemographicsByZCTA"
								},
								"destination": {
									"fileName": "dboDemographicsByZCTA"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Documents"
								},
								"destination": {
									"fileName": "dboDocuments"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "EventLocations"
								},
								"destination": {
									"fileName": "dboEventLocations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Events"
								},
								"destination": {
									"fileName": "dboEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "GeographicLocations"
								},
								"destination": {
									"fileName": "dboGeographicLocations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "GlobalEvents"
								},
								"destination": {
									"fileName": "dboGlobalEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "GroupEvents"
								},
								"destination": {
									"fileName": "dboGroupEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Groups"
								},
								"destination": {
									"fileName": "dboGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsDataMartChange"
								},
								"destination": {
									"fileName": "dboLogsDataMartChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsDocumentChange"
								},
								"destination": {
									"fileName": "dboLogsDocumentChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsExternalCommunication"
								},
								"destination": {
									"fileName": "dboLogsExternalCommunication"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsGroupChange"
								},
								"destination": {
									"fileName": "dboLogsGroupChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsNewDataMartClient"
								},
								"destination": {
									"fileName": "dboLogsNewDataMartClient"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsNewRequestDraftSubmitted"
								},
								"destination": {
									"fileName": "dboLogsNewRequestDraftSubmitted"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsNewRequestSubmitted"
								},
								"destination": {
									"fileName": "dboLogsNewRequestSubmitted"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsOrganizationChange"
								},
								"destination": {
									"fileName": "dboLogsOrganizationChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsPasswordExpiration"
								},
								"destination": {
									"fileName": "dboLogsPasswordExpiration"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsProfileUpdated"
								},
								"destination": {
									"fileName": "dboLogsProfileUpdated"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsProjectChange"
								},
								"destination": {
									"fileName": "dboLogsProjectChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRegistryChange"
								},
								"destination": {
									"fileName": "dboLogsRegistryChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestAssignmentChange"
								},
								"destination": {
									"fileName": "dboLogsRequestAssignmentChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestCommentChange"
								},
								"destination": {
									"fileName": "dboLogsRequestCommentChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestDataMartAddedRemoved"
								},
								"destination": {
									"fileName": "dboLogsRequestDataMartAddedRemoved"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestDataMartMetadataChange"
								},
								"destination": {
									"fileName": "dboLogsRequestDataMartMetadataChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestDocumentChange"
								},
								"destination": {
									"fileName": "dboLogsRequestDocumentChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestMetadataChange"
								},
								"destination": {
									"fileName": "dboLogsRequestMetadataChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRequestStatusChange"
								},
								"destination": {
									"fileName": "dboLogsRequestStatusChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsResponseViewed"
								},
								"destination": {
									"fileName": "dboLogsResponseViewed"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsResultsReminder"
								},
								"destination": {
									"fileName": "dboLogsResultsReminder"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsRoutingStatusChange"
								},
								"destination": {
									"fileName": "dboLogsRoutingStatusChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsSubmittedRequestAwaitsResponse"
								},
								"destination": {
									"fileName": "dboLogsSubmittedRequestAwaitsResponse"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsSubmittedRequestNeedsApproval"
								},
								"destination": {
									"fileName": "dboLogsSubmittedRequestNeedsApproval"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsTaskChange"
								},
								"destination": {
									"fileName": "dboLogsTaskChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsTaskReminder"
								},
								"destination": {
									"fileName": "dboLogsTaskReminder"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUploadedResultNeedsApproval"
								},
								"destination": {
									"fileName": "dboLogsUploadedResultNeedsApproval"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUserAuthentication"
								},
								"destination": {
									"fileName": "dboLogsUserAuthentication"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUserChange"
								},
								"destination": {
									"fileName": "dboLogsUserChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUserPasswordChange"
								},
								"destination": {
									"fileName": "dboLogsUserPasswordChange"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUserRegistrationChanged"
								},
								"destination": {
									"fileName": "dboLogsUserRegistrationChanged"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LogsUserRegistrationSubmitted"
								},
								"destination": {
									"fileName": "dboLogsUserRegistrationSubmitted"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LookupListCategories"
								},
								"destination": {
									"fileName": "dboLookupListCategories"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LookupLists"
								},
								"destination": {
									"fileName": "dboLookupLists"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LookupListValues"
								},
								"destination": {
									"fileName": "dboLookupListValues"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LookUpMetrics"
								},
								"destination": {
									"fileName": "dboLookUpMetrics"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "LookUpQueryTypeMetrics"
								},
								"destination": {
									"fileName": "dboLookUpQueryTypeMetrics"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "MigrationScript"
								},
								"destination": {
									"fileName": "dboMigrationScript"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "NetworkMessages"
								},
								"destination": {
									"fileName": "dboNetworkMessages"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "NetworkMessageUsers"
								},
								"destination": {
									"fileName": "dboNetworkMessageUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Networks"
								},
								"destination": {
									"fileName": "dboNetworks"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "OrganizationElectronicHealthRecordSystems"
								},
								"destination": {
									"fileName": "dboOrganizationElectronicHealthRecordSystems"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "OrganizationEvents"
								},
								"destination": {
									"fileName": "dboOrganizationEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "OrganizationGroups"
								},
								"destination": {
									"fileName": "dboOrganizationGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "OrganizationRegistries"
								},
								"destination": {
									"fileName": "dboOrganizationRegistries"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Organizations"
								},
								"destination": {
									"fileName": "dboOrganizations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "PermissionLocations"
								},
								"destination": {
									"fileName": "dboPermissionLocations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Permissions"
								},
								"destination": {
									"fileName": "dboPermissions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "PluginSessionDocuments"
								},
								"destination": {
									"fileName": "dboPluginSessionDocuments"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "PluginSessions"
								},
								"destination": {
									"fileName": "dboPluginSessions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectDataMartEvents"
								},
								"destination": {
									"fileName": "dboProjectDataMartEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectDataMarts"
								},
								"destination": {
									"fileName": "dboProjectDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectEvents"
								},
								"destination": {
									"fileName": "dboProjectEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectOrganizationEvents"
								},
								"destination": {
									"fileName": "dboProjectOrganizationEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectOrganizations"
								},
								"destination": {
									"fileName": "dboProjectOrganizations"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ProjectRequestTypes"
								},
								"destination": {
									"fileName": "dboProjectRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Projects"
								},
								"destination": {
									"fileName": "dboProjects"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Registries"
								},
								"destination": {
									"fileName": "dboRegistries"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RegistryDefinitions"
								},
								"destination": {
									"fileName": "dboRegistryDefinitions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RegistryEvents"
								},
								"destination": {
									"fileName": "dboRegistryEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RegistryItemDefinitionLookup"
								},
								"destination": {
									"fileName": "dboRegistryItemDefinitionLookup"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ReportAggregationLevels"
								},
								"destination": {
									"fileName": "dboReportAggregationLevels"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestDataMartResponses"
								},
								"destination": {
									"fileName": "dboRequestDataMartResponses"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestDataMartResponseSearchResults"
								},
								"destination": {
									"fileName": "dboRequestDataMartResponseSearchResults"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestDataMarts"
								},
								"destination": {
									"fileName": "dboRequestDataMarts"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestDocuments"
								},
								"destination": {
									"fileName": "dboRequestDocuments"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequesterCenters"
								},
								"destination": {
									"fileName": "dboRequesterCenters"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestObserverEventSubscriptions"
								},
								"destination": {
									"fileName": "dboRequestObserverEventSubscriptions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestObservers"
								},
								"destination": {
									"fileName": "dboRequestObservers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Requests"
								},
								"destination": {
									"fileName": "dboRequests"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestSchedules"
								},
								"destination": {
									"fileName": "dboRequestSchedules"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestSearchTerms"
								},
								"destination": {
									"fileName": "dboRequestSearchTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestSharedFolderRequests"
								},
								"destination": {
									"fileName": "dboRequestSharedFolderRequests"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestSharedFolders"
								},
								"destination": {
									"fileName": "dboRequestSharedFolders"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestTypeModels"
								},
								"destination": {
									"fileName": "dboRequestTypeModels"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestTypes"
								},
								"destination": {
									"fileName": "dboRequestTypes"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestTypeTerms"
								},
								"destination": {
									"fileName": "dboRequestTypeTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "RequestUsers"
								},
								"destination": {
									"fileName": "dboRequestUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "ResponseGroups"
								},
								"destination": {
									"fileName": "dboResponseGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Roles"
								},
								"destination": {
									"fileName": "dboRoles"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Security_Tuple1"
								},
								"destination": {
									"fileName": "dboSecurity_Tuple1"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Security_Tuple2"
								},
								"destination": {
									"fileName": "dboSecurity_Tuple2"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Security_Tuple3"
								},
								"destination": {
									"fileName": "dboSecurity_Tuple3"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Security_Tuple4"
								},
								"destination": {
									"fileName": "dboSecurity_Tuple4"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Security_Tuple5"
								},
								"destination": {
									"fileName": "dboSecurity_Tuple5"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityGroups"
								},
								"destination": {
									"fileName": "dboSecurityGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityGroupUsers"
								},
								"destination": {
									"fileName": "dboSecurityGroupUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritance"
								},
								"destination": {
									"fileName": "dboSecurityInheritance"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritanceClosure"
								},
								"destination": {
									"fileName": "dboSecurityInheritanceClosure"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritanceClosure2"
								},
								"destination": {
									"fileName": "dboSecurityInheritanceClosure2"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritanceClosure3"
								},
								"destination": {
									"fileName": "dboSecurityInheritanceClosure3"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritanceClosure4"
								},
								"destination": {
									"fileName": "dboSecurityInheritanceClosure4"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityInheritanceClosure5"
								},
								"destination": {
									"fileName": "dboSecurityInheritanceClosure5"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityMembership"
								},
								"destination": {
									"fileName": "dboSecurityMembership"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityMembershipClosure"
								},
								"destination": {
									"fileName": "dboSecurityMembershipClosure"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SecurityTargets"
								},
								"destination": {
									"fileName": "dboSecurityTargets"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "SsoEndpoints"
								},
								"destination": {
									"fileName": "dboSsoEndpoints"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "StratificationAgeRangeMapping"
								},
								"destination": {
									"fileName": "dboStratificationAgeRangeMapping"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "StratificationCategoryLookUp"
								},
								"destination": {
									"fileName": "dboStratificationCategoryLookUp"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "sysdiagrams"
								},
								"destination": {
									"fileName": "dbosysdiagrams"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "TaskReferences"
								},
								"destination": {
									"fileName": "dboTaskReferences"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Tasks"
								},
								"destination": {
									"fileName": "dboTasks"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "TaskUsers"
								},
								"destination": {
									"fileName": "dboTaskUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Templates"
								},
								"destination": {
									"fileName": "dboTemplates"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "TemplateTerms"
								},
								"destination": {
									"fileName": "dboTemplateTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Terms"
								},
								"destination": {
									"fileName": "dboTerms"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "TimeZoneInfo"
								},
								"destination": {
									"fileName": "dboTimeZoneInfo"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "UserEvents"
								},
								"destination": {
									"fileName": "dboUserEvents"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "UserEventSubscriptions"
								},
								"destination": {
									"fileName": "dboUserEventSubscriptions"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Users"
								},
								"destination": {
									"fileName": "dboUsers"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "UserSettings"
								},
								"destination": {
									"fileName": "dboUserSettings"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkflowActivities"
								},
								"destination": {
									"fileName": "dboWorkflowActivities"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkflowActivityCompletionMaps"
								},
								"destination": {
									"fileName": "dboWorkflowActivityCompletionMaps"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkflowActivityResults"
								},
								"destination": {
									"fileName": "dboWorkflowActivityResults"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkflowActivitySecurityGroups"
								},
								"destination": {
									"fileName": "dboWorkflowActivitySecurityGroups"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkflowRoles"
								},
								"destination": {
									"fileName": "dboWorkflowRoles"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "Workflows"
								},
								"destination": {
									"fileName": "dboWorkflows"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "WorkplanTypes"
								},
								"destination": {
									"fileName": "dboWorkplanTypes"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "AggregatedCounter"
								},
								"destination": {
									"fileName": "HangFireAggregatedCounter"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Counter"
								},
								"destination": {
									"fileName": "HangFireCounter"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Hash"
								},
								"destination": {
									"fileName": "HangFireHash"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Job"
								},
								"destination": {
									"fileName": "HangFireJob"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "JobParameter"
								},
								"destination": {
									"fileName": "HangFireJobParameter"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "JobQueue"
								},
								"destination": {
									"fileName": "HangFireJobQueue"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "List"
								},
								"destination": {
									"fileName": "HangFireList"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Schema"
								},
								"destination": {
									"fileName": "HangFireSchema"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Server"
								},
								"destination": {
									"fileName": "HangFireServer"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "Set"
								},
								"destination": {
									"fileName": "HangFireSet"
								}
							},
							{
								"source": {
									"schema": "HangFire",
									"table": "State"
								},
								"destination": {
									"fileName": "HangFireState"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dynamicSQLTableSource')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDatasetLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/healthdataapicoppy')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['state']"
										},
										"sink": {
											"path": "state"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_yes']"
										},
										"sink": {
											"path": "critical_staffing_shortage_today_yes"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_no']"
										},
										"sink": {
											"path": "critical_staffing_shortage_today_no"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_today_not_reported']"
										},
										"sink": {
											"path": "critical_staffing_shortage_today_not_reported"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_yes']"
										},
										"sink": {
											"path": "critical_staffing_shortage_anticipated_within_week_yes"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_no']"
										},
										"sink": {
											"path": "critical_staffing_shortage_anticipated_within_week_no"
										}
									},
									{
										"source": {
											"path": "$['critical_staffing_shortage_anticipated_within_week_not_reported']"
										},
										"sink": {
											"path": "critical_staffing_shortage_anticipated_within_week_not_reported"
										}
									},
									{
										"source": {
											"path": "$['hospital_onset_covid']"
										},
										"sink": {
											"path": "hospital_onset_covid"
										}
									},
									{
										"source": {
											"path": "$['hospital_onset_covid_coverage']"
										},
										"sink": {
											"path": "hospital_onset_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds']"
										},
										"sink": {
											"path": "inpatient_beds"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_coverage']"
										},
										"sink": {
											"path": "inpatient_beds_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used']"
										},
										"sink": {
											"path": "inpatient_beds_used"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_coverage']"
										},
										"sink": {
											"path": "inpatient_beds_used_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_covid']"
										},
										"sink": {
											"path": "inpatient_beds_used_covid"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_used_covid_coverage']"
										},
										"sink": {
											"path": "inpatient_beds_used_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_confirmed']"
										},
										"sink": {
											"path": "previous_day_admission_adult_covid_confirmed"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_confirmed_coverage']"
										},
										"sink": {
											"path": "previous_day_admission_adult_covid_confirmed_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_suspected']"
										},
										"sink": {
											"path": "previous_day_admission_adult_covid_suspected"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_adult_covid_suspected_coverage']"
										},
										"sink": {
											"path": "previous_day_admission_adult_covid_suspected_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_confirmed']"
										},
										"sink": {
											"path": "previous_day_admission_pediatric_covid_confirmed"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_confirmed_coverage']"
										},
										"sink": {
											"path": "previous_day_admission_pediatric_covid_confirmed_coverage"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_suspected']"
										},
										"sink": {
											"path": "previous_day_admission_pediatric_covid_suspected"
										}
									},
									{
										"source": {
											"path": "$['previous_day_admission_pediatric_covid_suspected_coverage']"
										},
										"sink": {
											"path": "previous_day_admission_pediatric_covid_suspected_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_adult_icu_bed_occupancy']"
										},
										"sink": {
											"path": "staffed_adult_icu_bed_occupancy"
										}
									},
									{
										"source": {
											"path": "$['staffed_adult_icu_bed_occupancy_coverage']"
										},
										"sink": {
											"path": "staffed_adult_icu_bed_occupancy_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_and_suspected_covid']"
										},
										"sink": {
											"path": "staffed_icu_adult_patients_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"path": "staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_covid']"
										},
										"sink": {
											"path": "staffed_icu_adult_patients_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['staffed_icu_adult_patients_confirmed_covid_coverage']"
										},
										"sink": {
											"path": "staffed_icu_adult_patients_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_and_suspected_covid']"
										},
										"sink": {
											"path": "total_adult_patients_hospitalized_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"path": "total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_covid']"
										},
										"sink": {
											"path": "total_adult_patients_hospitalized_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['total_adult_patients_hospitalized_confirmed_covid_coverage']"
										},
										"sink": {
											"path": "total_adult_patients_hospitalized_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_and_suspected_covid']"
										},
										"sink": {
											"path": "total_pediatric_patients_hospitalized_confirmed_and_suspected_covid"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage']"
										},
										"sink": {
											"path": "total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_covid']"
										},
										"sink": {
											"path": "total_pediatric_patients_hospitalized_confirmed_covid"
										}
									},
									{
										"source": {
											"path": "$['total_pediatric_patients_hospitalized_confirmed_covid_coverage']"
										},
										"sink": {
											"path": "total_pediatric_patients_hospitalized_confirmed_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['total_staffed_adult_icu_beds']"
										},
										"sink": {
											"path": "total_staffed_adult_icu_beds"
										}
									},
									{
										"source": {
											"path": "$['total_staffed_adult_icu_beds_coverage']"
										},
										"sink": {
											"path": "total_staffed_adult_icu_beds_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization']"
										},
										"sink": {
											"path": "inpatient_beds_utilization"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_coverage']"
										},
										"sink": {
											"path": "inpatient_beds_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_numerator']"
										},
										"sink": {
											"path": "inpatient_beds_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_beds_utilization_denominator']"
										},
										"sink": {
											"path": "inpatient_beds_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid']"
										},
										"sink": {
											"path": "percent_of_inpatients_with_covid"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_coverage']"
										},
										"sink": {
											"path": "percent_of_inpatients_with_covid_coverage"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_numerator']"
										},
										"sink": {
											"path": "percent_of_inpatients_with_covid_numerator"
										}
									},
									{
										"source": {
											"path": "$['percent_of_inpatients_with_covid_denominator']"
										},
										"sink": {
											"path": "percent_of_inpatients_with_covid_denominator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization']"
										},
										"sink": {
											"path": "inpatient_bed_covid_utilization"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_coverage']"
										},
										"sink": {
											"path": "inpatient_bed_covid_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_numerator']"
										},
										"sink": {
											"path": "inpatient_bed_covid_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['inpatient_bed_covid_utilization_denominator']"
										},
										"sink": {
											"path": "inpatient_bed_covid_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization']"
										},
										"sink": {
											"path": "adult_icu_bed_covid_utilization"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_coverage']"
										},
										"sink": {
											"path": "adult_icu_bed_covid_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_numerator']"
										},
										"sink": {
											"path": "adult_icu_bed_covid_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_covid_utilization_denominator']"
										},
										"sink": {
											"path": "adult_icu_bed_covid_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization']"
										},
										"sink": {
											"path": "adult_icu_bed_utilization"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_coverage']"
										},
										"sink": {
											"path": "adult_icu_bed_utilization_coverage"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_numerator']"
										},
										"sink": {
											"path": "adult_icu_bed_utilization_numerator"
										}
									},
									{
										"source": {
											"path": "$['adult_icu_bed_utilization_denominator']"
										},
										"sink": {
											"path": "adult_icu_bed_utilization_denominator"
										}
									},
									{
										"source": {
											"path": "$['reporting_cutoff_start']"
										},
										"sink": {
											"path": "reporting_cutoff_start"
										}
									},
									{
										"source": {
											"path": "$['geocoded_state']['type']"
										},
										"sink": {
											"path": "type"
										}
									},
									{
										"source": {
											"path": "$['geocoded_state']['coordinates']"
										},
										"sink": {
											"path": "coordinates"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "heathdataApiCovid19JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLSHealthDataCovid19JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-10T14:47:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/heathdataApiCovid19JSON')]",
				"[concat(variables('workspaceId'), '/datasets/ADLSHealthDataCovid19JSON')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLSHealthDataCovid19JSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "HealthDataCovid19API.json",
						"folderPath": "raw-files",
						"fileSystem": "health-data-api-covid19"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDatasetLake')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{concat(dataset().cw_fileName,'.csv')}",
							"type": "Expression"
						},
						"folderPath": "raw-files",
						"fileSystem": "pmn-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csvformatehhs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw-files",
						"fileSystem": "health-data-api-covid19"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dynamicSQLTableSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1_onprem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "string"
					},
					"cw_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer1_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/heathdataApiCovid19JSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "healthdatacovid19",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"state": {
							"type": "string"
						},
						"critical_staffing_shortage_today_yes": {
							"type": "string"
						},
						"critical_staffing_shortage_today_no": {
							"type": "string"
						},
						"critical_staffing_shortage_today_not_reported": {
							"type": "string"
						},
						"critical_staffing_shortage_anticipated_within_week_yes": {
							"type": "string"
						},
						"critical_staffing_shortage_anticipated_within_week_no": {
							"type": "string"
						},
						"critical_staffing_shortage_anticipated_within_week_not_reported": {
							"type": "string"
						},
						"hospital_onset_covid": {
							"type": "string"
						},
						"hospital_onset_covid_coverage": {
							"type": "string"
						},
						"inpatient_beds": {
							"type": "string"
						},
						"inpatient_beds_coverage": {
							"type": "string"
						},
						"inpatient_beds_used": {
							"type": "string"
						},
						"inpatient_beds_used_coverage": {
							"type": "string"
						},
						"inpatient_beds_used_covid": {
							"type": "string"
						},
						"inpatient_beds_used_covid_coverage": {
							"type": "string"
						},
						"previous_day_admission_adult_covid_confirmed": {
							"type": "string"
						},
						"previous_day_admission_adult_covid_confirmed_coverage": {
							"type": "string"
						},
						"previous_day_admission_adult_covid_suspected": {
							"type": "string"
						},
						"previous_day_admission_adult_covid_suspected_coverage": {
							"type": "string"
						},
						"previous_day_admission_pediatric_covid_confirmed": {
							"type": "string"
						},
						"previous_day_admission_pediatric_covid_confirmed_coverage": {
							"type": "string"
						},
						"previous_day_admission_pediatric_covid_suspected": {
							"type": "string"
						},
						"previous_day_admission_pediatric_covid_suspected_coverage": {
							"type": "string"
						},
						"staffed_adult_icu_bed_occupancy": {
							"type": "string"
						},
						"staffed_adult_icu_bed_occupancy_coverage": {
							"type": "string"
						},
						"staffed_icu_adult_patients_confirmed_and_suspected_covid": {
							"type": "string"
						},
						"staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage": {
							"type": "string"
						},
						"staffed_icu_adult_patients_confirmed_covid": {
							"type": "string"
						},
						"staffed_icu_adult_patients_confirmed_covid_coverage": {
							"type": "string"
						},
						"total_adult_patients_hospitalized_confirmed_and_suspected_covid": {
							"type": "string"
						},
						"total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage": {
							"type": "string"
						},
						"total_adult_patients_hospitalized_confirmed_covid": {
							"type": "string"
						},
						"total_adult_patients_hospitalized_confirmed_covid_coverage": {
							"type": "string"
						},
						"total_pediatric_patients_hospitalized_confirmed_and_suspected_covid": {
							"type": "string"
						},
						"total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage": {
							"type": "string"
						},
						"total_pediatric_patients_hospitalized_confirmed_covid": {
							"type": "string"
						},
						"total_pediatric_patients_hospitalized_confirmed_covid_coverage": {
							"type": "string"
						},
						"total_staffed_adult_icu_beds": {
							"type": "string"
						},
						"total_staffed_adult_icu_beds_coverage": {
							"type": "string"
						},
						"inpatient_beds_utilization": {
							"type": "string"
						},
						"inpatient_beds_utilization_coverage": {
							"type": "string"
						},
						"inpatient_beds_utilization_numerator": {
							"type": "string"
						},
						"inpatient_beds_utilization_denominator": {
							"type": "string"
						},
						"percent_of_inpatients_with_covid": {
							"type": "string"
						},
						"percent_of_inpatients_with_covid_coverage": {
							"type": "string"
						},
						"percent_of_inpatients_with_covid_numerator": {
							"type": "string"
						},
						"percent_of_inpatients_with_covid_denominator": {
							"type": "string"
						},
						"inpatient_bed_covid_utilization": {
							"type": "string"
						},
						"inpatient_bed_covid_utilization_coverage": {
							"type": "string"
						},
						"inpatient_bed_covid_utilization_numerator": {
							"type": "string"
						},
						"inpatient_bed_covid_utilization_denominator": {
							"type": "string"
						},
						"adult_icu_bed_covid_utilization": {
							"type": "string"
						},
						"adult_icu_bed_covid_utilization_coverage": {
							"type": "string"
						},
						"adult_icu_bed_covid_utilization_numerator": {
							"type": "string"
						},
						"adult_icu_bed_covid_utilization_denominator": {
							"type": "string"
						},
						"adult_icu_bed_utilization": {
							"type": "string"
						},
						"adult_icu_bed_utilization_coverage": {
							"type": "string"
						},
						"adult_icu_bed_utilization_numerator": {
							"type": "string"
						},
						"adult_icu_bed_utilization_denominator": {
							"type": "string"
						},
						"reporting_cutoff_start": {
							"type": "string"
						},
						"geocoded_state": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string"
								},
								"coordinates": {
									"type": "array",
									"items": {
										"type": "number"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/healthdatacovid19')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "adlskey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1_onprem')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_onprem_connectionString')]",
					"userName": "[parameters('SqlServer1_onprem_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureadmin"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/healthdatacovid19')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('healthdatacovid19_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syna-wrk-copdemo-comm-01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syna-wrk-copdemo-comm-01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syna-wrk-copdemo-comm-01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syna-wrk-copdemo-comm-01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/daily tirgger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "HeathDataAPI-ingest",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-04-29T15:44:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/HeathDataAPI-ingest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime3')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"description": "installed on the vm-datast-copdemo-02",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/integrationRuntime2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 Data Preparation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"bigDataPool": {
					"referenceName": "vacopsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/74c259e4-9067-4391-a28a-32c2d748fa4c/resourceGroups/rg-dbw-comm-01/providers/Microsoft.Synapse/workspaces/syna-wrk-copdemo-comm-01/bigDataPools/vacopsparkpool",
						"name": "vacopsparkpool",
						"type": "Spark",
						"endpoint": "https://syna-wrk-copdemo-comm-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/vacopsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "df542f24-4fe9-4b99-a2bc-4d2e314c1b59"
							}
						},
						"source": [
							"##1. Get the data:\n",
							"\n",
							"Source: https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/DE_Syn_PUF"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "2f659071-5db5-4de9-800e-87bb7a25757b"
							}
						},
						"source": [
							"dbutils.fs.mkdirs(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "e0e41927-4912-40ba-9341-bec94501d227"
							}
						},
						"source": [
							"import urllib.request\n",
							"\n",
							"for x in range(1, 21):\n",
							"  print(\"start:\" + str(x))\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2008_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"http://downloads.cms.gov/files/DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"A.zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"A.zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"A.zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"http://downloads.cms.gov/files/DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"B.zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"B.zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_to_2010_Carrier_Claims_Sample_\" + str(x) + \"B.zip\")  \n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2008_to_2010_Inpatient_Claims_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Inpatient_Claims_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_to_2010_Inpatient_Claims_Sample_\" + str(x) + \".zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2008_to_2010_Outpatient_Claims_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Outpatient_Claims_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_to_2010_Outpatient_Claims_Sample_\" + str(x) + \".zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"http://downloads.cms.gov/files/DE1_0_2008_to_2010_Prescription_Drug_Events_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Prescription_Drug_Events_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2008_to_2010_Prescription_Drug_Events_Sample_\" + str(x) + \".zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2009_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2009_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2009_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  try:\n",
							"    urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/SynPUFs/Downloads/DE1_0_2010_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  except:\n",
							"    print(\"DE1_0_2010_Beneficiary_Summary_File_Sample_\" + str(x) + \".zip\")\n",
							"  print(\"stop:\" + str(x))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "e83a020a-23f5-45e2-9cff-dbc95a3d597a"
							}
						},
						"source": [
							"dbutils.fs.ls(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "e5914599-2c74-49b5-a578-46dc6559b867"
							}
						},
						"source": [
							"urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2010_Beneficiary_Summary_File_Sample_7.zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_7.zip\")\n",
							"urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2010_Beneficiary_Summary_File_Sample_8.zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_8.zip\")\n",
							"urllib.request.urlretrieve(\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/Downloads/DE1_0_2010_Beneficiary_Summary_File_Sample_9.zip\", \"/dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_9.zip\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d6788b71-efbd-459e-991a-32f082581efe"
							}
						},
						"source": [
							"file_df = dbutils.fs.ls(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/\")\n",
							"display(file_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c90598bc-d496-4806-86f2-56658e4148e5"
							}
						},
						"source": [
							"##2. Unzip the data:"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "844694fc-3c45-422a-8e4d-adf9201d34b2"
							}
						},
						"source": [
							"for x in file_df:\n",
							"  print(\"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/\" + x[1])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "828a255a-73e6-4f14-9b90-5f78aa410c7c"
							}
						},
						"source": [
							"%sh\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_10.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_11.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_12.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_13.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_14.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_15.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_16.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_17.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_18.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_19.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_2.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_20.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_3.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_4.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_5.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_6.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_7.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_8.zip\n",
							"unzip /dbfs/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_9.zip"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "0ab2a80d-cf98-40ce-97a7-407d6e17707b"
							}
						},
						"source": [
							"unzip_df = dbutils.fs.ls(\"file:/databricks/driver/\")\n",
							"display(unzip_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "08eab803-49f5-4687-964a-73e915d2590e"
							}
						},
						"source": [
							"for x in unzip_df:\n",
							"  if '.csv' in x[1]:\n",
							"    try:\n",
							"         exec('dbutils.fs.mv(\"file:/databricks/driver/' + x[1] + '\", \"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/' + x[1] + '\")')\n",
							"    except:\n",
							"      print(x[1])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "2879c786-c303-4a8b-9230-463eef717752"
							}
						},
						"source": [
							"csvs_df = dbutils.fs.ls('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/')\n",
							"display(csvs_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "cc41ed31-ebc8-4bb7-aaf5-e003bfb612ac"
							}
						},
						"source": [
							"first_csvs = []\n",
							"for x in csvs_df:\n",
							"  if '_2.csv' in x[0]:\n",
							"    first_csvs.append(x[0])\n",
							"  elif '_2A.csv' in x[0]:\n",
							"    first_csvs.append(x[0])\n",
							"  elif '_2B.csv' in x[0]:\n",
							"    first_csvs.append(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "42caa2ca-4b28-4861-a29b-f9c467260786"
							}
						},
						"source": [
							"for x in first_csvs:\n",
							"  print(x + \"_df = spark.read.csv('\" + x + \"', header=True, inferSchema=True)\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "83252b8a-cf44-4f32-9fb7-cfd941af9b5d"
							}
						},
						"source": [
							"##3: Create the Delta Tables"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "4836ec20-1f8d-4a79-a2a8-b5f8c25ed2ee"
							}
						},
						"source": [
							"Beneficiary_Summary_df = spark.read.csv(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_Beneficiary_Summary_File_Sample_2.csv\", header=True, inferSchema=True)\n",
							"Carrier_ClaimsA_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Carrier_Claims_Sample_2A.csv', header=True, inferSchema=True)\n",
							"Inpatient_Claims_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Inpatient_Claims_Sample_2.csv', header=True, inferSchema=True)\n",
							"Outpatient_Claims_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Outpatient_Claims_Sample_2.csv', header=True, inferSchema=True)\n",
							"Prescription_Drug_Events_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Prescription_Drug_Events_Sample_2.csv', header=True, inferSchema=True)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "96040072-1f55-4589-91ae-1e5664f69aac"
							}
						},
						"source": [
							"%sql\n",
							"CREATE DATABASE IF NOT EXISTS CMS_DE_SYNTH_CLAIMS"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "4207f4ba-6b5d-4fd3-8c98-42a4ff48c748"
							}
						},
						"source": [
							"%sql\n",
							"USE CMS_DE_SYNTH_CLAIMS"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "dc64e0d6-fee9-464e-84eb-b256f7e8b508"
							}
						},
						"source": [
							"Beneficiary_Summary_df.createTempView(\"Beneficiary_Summary_VW\")\n",
							"Carrier_ClaimsA_df.createTempView(\"Carrier_Claims_VW\")\n",
							"Inpatient_Claims_df.createTempView(\"Inpatient_Claims_VW\") \n",
							"Outpatient_Claims_df.createTempView(\"Outpatient_Claims_VW\") \n",
							"Prescription_Drug_Events_df.createTempView(\"Prescription_Drug_Events_VW\") "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8bb200e4-192b-4175-9b5a-18c32ad19648"
							}
						},
						"source": [
							"%sql\n",
							"select count(*) from k2g_metadata.profile_data"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "2c6cbcb1-061a-4b7a-b530-d68c3584bd00"
							}
						},
						"source": [
							"%sql\n",
							"CREATE TABLE BENEFICIARY_SUMMARY USING DELTA LOCATION 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/beneficiary_summary' AS SELECT *, 2008 YEAR FROM Beneficiary_Summary_VW;\n",
							"CREATE TABLE CARRIER_CLAIMS USING DELTA LOCATION 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/carrier_claims' AS SELECT * FROM CARRIER_CLAIMS_VW;\n",
							"CREATE TABLE INPATIENT_CLAIMS USING DELTA LOCATION 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/inpatient_claims' AS SELECT * FROM INPATIENT_CLAIMS_VW;\n",
							"CREATE TABLE OUTPATIENT_CLAIMS USING DELTA LOCATION 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/outpatient_claims' AS SELECT * FROM OUTPATIENT_CLAIMS_VW;\n",
							"CREATE TABLE PRESCRIPTION_DRUG_EVENTS USING DELTA LOCATION 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/prescription_drug_events' AS SELECT * FROM PRESCRIPTION_DRUG_EVENTS_VW;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "b7462d9e-e1e0-4ac8-890c-304a088faf25"
							}
						},
						"source": [
							"Carrier_ClaimsB_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2008_to_2010_Carrier_Claims_Sample_2B.csv', header=True, inferSchema=True)\n",
							"Beneficiary_Summary_09_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2009_Beneficiary_Summary_File_Sample_2.csv', header=True, inferSchema=True)\n",
							"Beneficiary_Summary_10_df = spark.read.csv('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/DE1_0_2010_Beneficiary_Summary_File_Sample_2.csv', header=True, inferSchema=True)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "5b18b5c3-d1db-490d-98ca-c0ee6b438a62"
							}
						},
						"source": [
							"Beneficiary_Summary_09_df.createTempView(\"Beneficiary_Summary_09\");\n",
							"Beneficiary_Summary_10_df.createTempView(\"Beneficiary_Summary_10\");"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "990be23a-ae7f-4cd8-b701-9e09a7848c3e"
							}
						},
						"source": [
							"%sql\n",
							"INSERT INTO BENEFICIARY_SUMMARY SELECT *, 2009 YEAR FROM Beneficiary_Summary_09;\n",
							"INSERT INTO BENEFICIARY_SUMMARY SELECT *, 2010 YEAR FROM Beneficiary_Summary_10;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "601dbe59-6e6c-4398-a8d9-98e0a2dac7c6"
							}
						},
						"source": [
							"Carrier_ClaimsB_df.write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/carrier_claims\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "7138ad28-b046-4758-91b7-1a277558033e"
							}
						},
						"source": [
							"%sql \n",
							"select year, count(*) from beneficiary_summary group by year"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8fc12bca-c68d-4b03-bae3-1975f90db157"
							}
						},
						"source": [
							"##4. Insert all the other 19 samples of data into the tables."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bbbfe18d-7b8a-49ba-97e5-0d8ae3999ae9"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if 'Carrier_Claims_Sample_' + str(i) + 'A.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/carrier_claims\")')\n",
							"      except:\n",
							"        print(x[0])\n",
							"  "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9cb0025a-fadc-46bc-b4fd-cff230289756"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if 'Carrier_Claims_Sample_' + str(i) + 'B.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/carrier_claims\")')\n",
							"      except:\n",
							"        print(x[0])\n",
							"  "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "4a612b0b-b9c1-4a9d-8329-50ff16205a65"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if 'Inpatient_Claims_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/inpatient_claims\")')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c21c4acb-b902-4169-bf80-ae828d2939f2"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if 'Outpatient_Claims_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/outpatient_claims\")')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "59ba77c5-dc8e-4574-872b-174475580d21"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if 'Prescription_Drug_Events_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/prescription_drug_events\")')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d8697873-3ebf-45f6-8791-195e21dc4521"
							}
						},
						"source": [
							"from pyspark.sql.functions import *"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "41ad0a3f-4038-4b7e-86d0-75449f496707"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if '2008_Beneficiary_Summary_File_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True).withColumn(\"YEAR\", lit(2008)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/beneficiary_summary\"))')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "310945ff-c1d4-4187-ae29-158f7c4e4adc"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if '2009_Beneficiary_Summary_File_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True).withColumn(\"YEAR\", lit(2009)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/beneficiary_summary\"))')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "fac8a7c6-a07c-49a2-aefa-7643a07b3771"
							}
						},
						"source": [
							"for i in range(3,21):\n",
							"  for x in csvs_df:\n",
							"    if '2010_Beneficiary_Summary_File_Sample_' + str(i) + '.csv' in x[1]:\n",
							"      try:\n",
							"        exec('(spark.read.csv(\"' + x[0] + '\", header=True, inferSchema=True).withColumn(\"YEAR\", lit(2010)).write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/beneficiary_summary\"))')\n",
							"      except:\n",
							"        print(x[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "0930054a-9d0f-41ca-8db7-fd8c8851fff2"
							}
						},
						"source": [
							"%sql\n",
							"select year, count(*) from CMS_DE_SYNTH_CLAIMS.beneficiary_summary group by year"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "5fa3fc61-9ebe-40c9-b3e2-f3257ac608dd"
							}
						},
						"source": [
							"%sql\n",
							"use CMS_DE_SYNTH_CLAIMS"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8dc5cde8-76d1-4373-87ce-2e6423f5c9af"
							}
						},
						"source": [
							"%sql\n",
							"alter table cms28_desc_long_dx_1_csv rename to cms_icd9_diag_codes"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "feebd293-78db-4ef5-a90f-78b126f9d601"
							}
						},
						"source": [
							"##5. Add the ICD9 Diagnostic Code data to a table to join."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "6e2ee312-80c2-4229-b9c1-e3ff9f94a938"
							}
						},
						"source": [
							"%sql\n",
							"select count(*) from \n",
							"inpatient_claims a\n",
							"join cms_icd9_diag_codes b\n",
							"on a.ICD9_DGNS_CD_1 = b.code"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d99f817a-9f38-4fc5-a49a-e53536d09792"
							}
						},
						"source": [
							"# 1266049 to 1259882"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "0266db4a-f8dd-4a75-9b7d-30567774831f"
							}
						},
						"source": [
							"%sql\n",
							"\n",
							"select distinct ICD9_DGNS_CD_1 from inpatient_claims\n",
							"minus\n",
							"select distinct code from cms_icd9_diag_codes"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "1a150b19-c2e4-4fdb-a19e-9c87660eb394"
							}
						},
						"source": [
							"df = spark.sql(\"select * from CMS_DE_SYNTH_CLAIMS.inpatient_claims\")\n",
							"df_columns = df.columns"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "81f06e9d-e40a-4f27-9cf0-c54c564cd6a0"
							}
						},
						"source": [
							"for col in df_columns:\n",
							"  if \"ICD9\" in col:\n",
							"    print(\"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, \" + col + \" as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where \" + col + \" is not null union\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "383f4a43-3350-42c1-9e98-7c4c0f0bb382"
							}
						},
						"source": [
							"%sql \n",
							"create or replace view inpatient_claims_diagnosis as\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ADMTNG_ICD9_DGNS_CD as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ADMTNG_ICD9_DGNS_CD is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_1 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_2 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_3 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_4 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_5 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_6 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_6 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_7 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_7 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_8 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_8 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_9 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_9 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_10 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_DGNS_CD_10 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_1 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_2 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_3 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_4 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_5 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_6 as ICD9_CD, 'Inpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.inpatient_claims where ICD9_PRCDR_CD_6 is not null"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bdb079d9-b0a9-4da5-840b-49e54f932efe"
							}
						},
						"source": [
							"df = spark.sql(\"select * from CMS_DE_SYNTH_CLAIMS.outpatient_claims\")\n",
							"df_columns = df.columns\n",
							"for col in df_columns:\n",
							"  if \"ICD9\" in col:\n",
							"    print(\"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, \" + col + \" as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where \" + col + \" is not null union\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "25b684a9-a9f3-4fe1-8253-86afbc0f35a9"
							}
						},
						"source": [
							"%sql\n",
							"create or replace view outpatient_claims_diagnosis as\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_1 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_2 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_3 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_4 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_5 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_6 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_6 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_7 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_7 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_8 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_8 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_9 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_9 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_DGNS_CD_10 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_DGNS_CD_10 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_1 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_2 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_3 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_4 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_5 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ICD9_PRCDR_CD_6 as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ICD9_PRCDR_CD_6 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, CLM_PMT_AMT AS COST, ADMTNG_ICD9_DGNS_CD as ICD9_CD, 'Outpatient' AS ENCOUNTERCLASS from CMS_DE_SYNTH_CLAIMS.outpatient_claims where ADMTNG_ICD9_DGNS_CD is not null"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "aa824da3-d1a7-4d0b-9533-3d965db45d25"
							}
						},
						"source": [
							"df = spark.sql(\"select * from CMS_DE_SYNTH_CLAIMS.carrier_claims\")\n",
							"df_columns = df.columns\n",
							"for col in df_columns:\n",
							"  if \"ICD9\" in col:\n",
							"    print(\"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, \" + col + \" as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where \" + col + \" is not null union\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "26fa8264-f97b-4c76-9562-ad2c82fe61fd"
							}
						},
						"source": [
							"%sql\n",
							"create or replace view carrier_claims_diagnosis as\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_1 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_2 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_3 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_4 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_5 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_6 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_6 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_7 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_7 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, ICD9_DGNS_CD_8 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where ICD9_DGNS_CD_8 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_1 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_1 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_2 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_2 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_3 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_3 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_4 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_4 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_5 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_5 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_6 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_6 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_7 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_7 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_8 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_8 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_9 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_9 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_10 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_10 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_11 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_11 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_12 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_12 is not null union\n",
							"select distinct DESYNPUF_ID, CLM_FROM_DT, CLM_THRU_DT, LINE_ICD9_DGNS_CD_13 as ICD9_CD from CMS_DE_SYNTH_CLAIMS.carrier_claims where LINE_ICD9_DGNS_CD_13 is not null"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "5aa25b8b-05da-41ba-956d-563023c11432"
							}
						},
						"source": [
							"%sql\n",
							"create or replace view claims_diagnosis_vw as select * from inpatient_claims_diagnosis union select * from outpatient_claims_diagnosis"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "31c90638-2181-439e-80e5-58dff79d0811"
							}
						},
						"source": [
							"%sql\n",
							"select a.*, b.description \n",
							"from claims_diagnosis_vw a\n",
							"join CMS_DE_SYNTH_CLAIMS.cms_icd9_diag_codes b\n",
							"on a.icd9_cd = b.code"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "ec2edf08-d281-4beb-b683-7f355dcf5c73"
							}
						},
						"source": [
							"df_encounters = spark.sql(\"select a.*, b.description \\\n",
							"from claims_diagnosis_vw a \\\n",
							"join CMS_DE_SYNTH_CLAIMS.cms_icd9_diag_codes b \\\n",
							"on a.icd9_cd = b.code\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9a13233a-3138-4069-acf9-ca97621d9b18"
							}
						},
						"source": [
							"%sql\n",
							"drop table CMS_DE_SYNTH_CLAIMS.cliams_encounters;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "81eca9a6-abca-4fd5-a724-d8f448158738"
							}
						},
						"source": [
							"dbutils.fs.rm(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/claims_encounters\", True)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d938816a-bef7-4574-bd97-947aeff0620a"
							}
						},
						"source": [
							"df_encounters.write.format(\"delta\").save(\"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/claims_encounters\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "cb6f158b-ffd4-4890-8da4-0e156bbcbe89"
							}
						},
						"source": [
							"%sql\n",
							"create table CMS_DE_SYNTH_CLAIMS.cliams_encounters\n",
							"using delta\n",
							"location \"dbfs:/home/cary.moore@databricks.com/syn_claim_puf/tables/claims_encounters\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COVID-19_HHS_Import')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "79169ab1-a1d5-4c4b-b26f-17180c220c6f"
							}
						},
						"source": [
							"from pyspark.sql.types import *\n",
							"\n",
							"data_schema_a = [StructField('state', StringType(), True), \\\n",
							"StructField('critical_staffing_shortage_today_yes', IntegerType(), True), \\\n",
							"StructField('critical_staffing_shortage_today_no', IntegerType(), True), \\\n",
							"StructField('critical_staffing_shortage_today_not_reported', IntegerType(), True), \\\n",
							"StructField('critical_staffing_shortage_anticipated_within_week_yes', IntegerType(), True), \\\n",
							"StructField('critical_staffing_shortage_anticipated_within_week_no', IntegerType(), True), \\\n",
							"StructField('critical_staffing_shortage_anticipated_within_week_not_reported', IntegerType(), True), \\\n",
							"StructField('hospital_onset_covid', IntegerType(), True), \\\n",
							"StructField('hospital_onset_covid_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_beds', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_used', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_used_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_used_covid', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_used_covid_coverage', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_adult_covid_confirmed', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_adult_covid_confirmed_coverage', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_adult_covid_suspected', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_adult_covid_suspected_coverage', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_pediatric_covid_confirmed', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_pediatric_covid_confirmed_coverage', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_pediatric_covid_suspected', IntegerType(), True), \\\n",
							"StructField('previous_day_admission_pediatric_covid_suspected_coverage', IntegerType(), True), \\\n",
							"StructField('staffed_adult_icu_bed_occupancy', IntegerType(), True), \\\n",
							"StructField('staffed_adult_icu_bed_occupancy_coverage', IntegerType(), True), \\\n",
							"StructField('staffed_icu_adult_patients_confirmed_and_suspected_covid', IntegerType(), True), \\\n",
							"StructField('staffed_icu_adult_patients_confirmed_and_suspected_covid_coverage', IntegerType(), True), \\\n",
							"StructField('staffed_icu_adult_patients_confirmed_covid', IntegerType(), True), \\\n",
							"StructField('staffed_icu_adult_patients_confirmed_covid_coverage', IntegerType(), True), \\\n",
							"StructField('total_adult_patients_hospitalized_confirmed_and_suspected_covid', IntegerType(), True), \\\n",
							"StructField('total_adult_patients_hospitalized_confirmed_and_suspected_covid_coverage', IntegerType(), True), \\\n",
							"StructField('total_adult_patients_hospitalized_confirmed_covid', IntegerType(), True), \\\n",
							"StructField('total_adult_patients_hospitalized_confirmed_covid_coverage', IntegerType(), True), \\\n",
							"StructField('total_pediatric_patients_hospitalized_confirmed_and_suspected_covid', IntegerType(), True), \\\n",
							"StructField('total_pediatric_patients_hospitalized_confirmed_and_suspected_covid_coverage', IntegerType(), True), \\\n",
							"StructField('total_pediatric_patients_hospitalized_confirmed_covid', IntegerType(), True), \\\n",
							"StructField('total_pediatric_patients_hospitalized_confirmed_covid_coverage', IntegerType(), True), \\\n",
							"StructField('total_staffed_adult_icu_beds', IntegerType(), True), \\\n",
							"StructField('total_staffed_adult_icu_beds_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_utilization', FloatType(), True), \\\n",
							"StructField('inpatient_beds_utilization_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_utilization_numerator', IntegerType(), True), \\\n",
							"StructField('inpatient_beds_utilization_denominator', IntegerType(), True), \\\n",
							"StructField('percent_of_inpatients_with_covid', FloatType(), True), \\\n",
							"StructField('percent_of_inpatients_with_covid_coverage', IntegerType(), True), \\\n",
							"StructField('percent_of_inpatients_with_covid_numerator', IntegerType(), True), \\\n",
							"StructField('percent_of_inpatients_with_covid_denominator', IntegerType(), True), \\\n",
							"StructField('inpatient_bed_covid_utilization', FloatType(), True), \\\n",
							"StructField('inpatient_bed_covid_utilization_coverage', IntegerType(), True), \\\n",
							"StructField('inpatient_bed_covid_utilization_numerator', IntegerType(), True), \\\n",
							"StructField('inpatient_bed_covid_utilization_denominator', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_covid_utilization', FloatType(), True), \\\n",
							"StructField('adult_icu_bed_covid_utilization_coverage', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_covid_utilization_numerator', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_covid_utilization_denominator', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_utilization', FloatType(), True), \\\n",
							"StructField('adult_icu_bed_utilization_coverage', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_utilization_numerator', IntegerType(), True), \\\n",
							"StructField('adult_icu_bed_utilization_denominator', IntegerType(), True), \\\n",
							"StructField('reporting_cutoff_start', StringType(), True), \\\n",
							"StructField('geocoded_state', StringType(), True)]\n",
							"final_struc_a = StructType(fields=data_schema_a)\n",
							"\n",
							"summary_df = spark.createDataFrame([], final_struc_a)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d54ca905-5868-405a-9699-a36670ab949e"
							}
						},
						"source": [
							"df = spark.read.option('multiline','true').json(\"dbfs:/mnt/health-data-api-covid19/raw-files/HealthDataCovid19API.json\").schema(data_schema_a)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "88bb39ae-b696-4a64-b91f-7a7a3f6b2658"
							}
						},
						"source": [
							"display(df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "648e9d65-6016-4872-bf81-7f072e86a5dd"
							}
						},
						"source": [
							"%sql\n",
							"create database covid_19_hhs_data"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c45b9af7-f920-45d8-a75f-2fb5ae84f2f6"
							}
						},
						"source": [
							"df.write.format('delta').save('dbfs:/mnt/health-data-api-covid19/raw-data/')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "933f503d-ac6f-4fab-aaeb-8f33e973c315"
							}
						},
						"source": [
							"%sql\n",
							"create table covid_19_hhs_data.HealthDataCovid19API using delta location 'dbfs:/mnt/health-data-api-covid19/raw-data/'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Immuta Config')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9653b237-5dfd-4874-aa51-04e5a90738ac"
							}
						},
						"source": [
							"dbutils.fs.ls(\"dbfs:/FileStore/tables\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "622fa907-ecd5-4b84-bedb-5a2533f1526b"
							}
						},
						"source": [
							"dbutils.fs.ls(\"dbfs:/cluster-logs/0422-194939-mink977/init_scripts/0422-194939-mink977_10_0_192_6/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "f8e6a024-091a-4c20-8f73-cfcef2a8555b"
							}
						},
						"source": [
							"dbutils.fs.head(\"dbfs:/cluster-logs/0422-194939-mink977/init_scripts/0422-194939-mink977_10_0_192_6/20210504_184336_00_immuta_cluster_init_script.sh.stdout.log\", 1000000)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "063bf08f-316e-4440-8daf-266c820321c8"
							}
						},
						"source": [
							"dbutils.fs.head(\"dbfs:/cluster-logs/0422-194939-mink977/driver/log4j-active.log\", 10000000)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d49e9c81-8b3c-428a-a590-39bab54adf1f"
							}
						},
						"source": [
							"%sh curl -k -H \"x-system-token: f30aff84-1475-4350-a133-883943e62390\" https://immuta.vacopdemo.com/hdfs/systemDetails"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "abc9711f-a828-40fc-add5-a3e49db438b5"
							}
						},
						"source": [
							"%sh curl -k https://13.90.32.189"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "40bade9e-f53d-47ac-97cf-84670593a8aa"
							}
						},
						"source": [
							"%sh curl -k -H \"x-system-token: f30aff84-1475-4350-a133-883943e62390\" https://13.90.32.189/hdfs/systemDetails"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9724ecc7-13f1-4ded-b443-22be0a14942c"
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c08af944-8a54-4542-8cb5-e1f74c0a5b93"
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "87b434d2-a25d-466a-90de-315bb289096b"
							}
						},
						"source": [
							"%sql show tables in cms_de_synth_claims"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "e07dd8df-5892-4793-b1d7-bd872a4b8dcf"
							}
						},
						"source": [
							"%sql use cms_de_synth_claims; show create table beneficiary_summary"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "dc98c9a6-4929-4b70-88c9-76a4a3640ad1"
							}
						},
						"source": [
							"dbutils.fs.mounts()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "873062a8-742d-4593-8512-143ae41e6c03"
							}
						},
						"source": [
							"%sql select * from default.customer_1 limit 100\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "cb7ad0a6-2cfa-448c-a93c-5fee76751129"
							}
						},
						"source": [
							"%sql show table"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/K2G_Data_Profiling')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "614ee984-a557-473c-9fa7-c80dfd413899"
							}
						},
						"source": [
							"%sql\n",
							"describe CMS_DE_SYNTH_CLAIMS.BENEFICIARY_SUMMARY"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "824a77fc-147e-4657-9451-ecf62f99590d"
							}
						},
						"source": [
							"%sql\n",
							"select count(*) from CMS_DE_SYNTH_CLAIMS.BENEFICIARY_SUMMARY"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "735ffabe-e257-40ff-920f-6895a4e80ecc"
							}
						},
						"source": [
							"Perform some very basic profiling."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "68e94f71-dd4c-4667-8e58-7a9dd2f115b4"
							}
						},
						"source": [
							"dbutils.fs.rm('dbfs:/home/cary.moore@databricks.com/syn_claim_puf/profile', True)\n",
							"spark.sql(\"drop table if exists CMS_DE_SYNTH_CLAIMS.profile_data\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "b75b2c76-b247-4736-85df-2fbae3363955"
							}
						},
						"source": [
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark import SparkContext"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "fd604044-0f0e-4e81-9119-f40f26664fe6"
							}
						},
						"source": [
							"%sql\n",
							"create table CMS_DE_SYNTH_CLAIMS.profile_data (\n",
							"name  string,\n",
							"value string,\n",
							"num_records float,\n",
							"len float\n",
							")\n",
							"using delta\n",
							"location 'dbfs:/home/cary.moore@databricks.com/syn_claim_puf/profile'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "369993f5-2ea1-4137-aa56-bb1734e8f39d"
							}
						},
						"source": [
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark import SparkContext\n",
							"\n",
							"def get_databases():\n",
							"  database_df = spark.sql(\"show databases\")\n",
							"  database_df = database_df.filter(database_df.databaseName!='k2g_metadata')\n",
							"  database_list = database_df.select('databaseName').collect()\n",
							"  return database_list\n",
							"\n",
							"def get_tables(database_name):\n",
							"  table_df = spark.sql(\"show tables from \" + database_name)\n",
							"  table_list = table_df.select('database','tableName').collect()\n",
							"  return table_list\n",
							"\n",
							"def get_columns(database_name, table_name):\n",
							"  column_df = spark.sql(\"show columns from \" + database_name + \".\" + table_name)\n",
							"  column_list = column_df.select('col_name').collect()\n",
							"  return column_list\n",
							"\n",
							"def profile_columns(database_name, table_name, column_name):\n",
							"  sql = 'select ' + \\\n",
							"  \"'\" + database_name + \"'\" + ' as database_name, ' + \\\n",
							"  \"'\" + table_name + \"'\" + ' as table_name, ' + \\\n",
							"  \"'\" + column_name + \"'\" + ' as column_name, ' + \\\n",
							"  column_name + ' as value, ' + \\\n",
							"  'count(*) as num_records, length(' + column_name + ') as len from ' + \\\n",
							"  database_name + '.' + table_name + ' group by ' + column_name\n",
							"  \n",
							"  df = spark.sql(sql)\n",
							"  \n",
							"  df2 = (df.select('database_name', 'table_name', 'column_name', 'num_records', 'value').withColumn('length', length('value')).withColumn('not_null_records', when((col('value').isNull()), \\\n",
							"       lit(0)).otherwise(col('num_records')))) \\\n",
							"      .groupBy('database_name', 'table_name', 'column_name') \\\n",
							"      .agg(sum('num_records').alias(\"total_records\"), \\\n",
							"           countDistinct('value').alias('distinct_values'), \\\n",
							"           min('value').cast(StringType()).alias('min_value'), \\\n",
							"           max('value').cast(StringType()).alias('max_value'), \\\n",
							"           max('length').alias('max_length'), \\\n",
							"           sum('not_null_records').alias('not_null_records'))\n",
							"\n",
							"  df2.write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/k2g_metadata/tables/profile_data\")\n",
							"  \n",
							"  return 0"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "009cea8a-139e-4440-b0d0-6e49e1e1bd17"
							}
						},
						"source": [
							"%sql\n",
							"truncate table k2g_metadata.profile_data"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "adb9f036-824a-4eb5-8b36-e4143474f883"
							}
						},
						"source": [
							"%sql\n",
							"vacuum k2g_metadata.profile_data"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bbb0e56e-0159-41ca-86e5-0d2b2a625357"
							}
						},
						"source": [
							"for x in get_databases():\n",
							"  for y in get_tables(x[0]):\n",
							"    for z in get_columns(y[0], y[1]):\n",
							"      try:\n",
							"        profile_columns(y[0], y[1], z[0])\n",
							"      except:\n",
							"        print(y[0], y[1], z[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "878736e2-6fb0-413e-85fe-27b622df3464"
							}
						},
						"source": [
							"%sql\n",
							"select * from k2g_metadata.profile_data order by 1, 2"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/K2G_Data_Profiling_faster')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"bigDataPool": {
					"referenceName": "vacopsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/74c259e4-9067-4391-a28a-32c2d748fa4c/resourceGroups/rg-dbw-comm-01/providers/Microsoft.Synapse/workspaces/syna-wrk-copdemo-comm-01/bigDataPools/vacopsparkpool",
						"name": "vacopsparkpool",
						"type": "Spark",
						"endpoint": "https://syna-wrk-copdemo-comm-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/vacopsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "735ffabe-e257-40ff-920f-6895a4e80ecc"
							}
						},
						"source": [
							"Perform some very basic profiling."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "369993f5-2ea1-4137-aa56-bb1734e8f39d"
							}
						},
						"source": [
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark import SparkContext\n",
							"\n",
							"def get_databases():\n",
							"  database_df = spark.sql(\"show databases\")\n",
							"  database_df = database_df.filter(database_df.databaseName!='k2g_metadata')\n",
							"  database_list = database_df.select('databaseName').collect()\n",
							"  return database_list\n",
							"\n",
							"def get_tables(database_name):\n",
							"  table_df = spark.sql(\"show tables from \" + database_name)\n",
							"  table_list = table_df.select('database','tableName').collect()\n",
							"  return table_list\n",
							"\n",
							"def get_columns(database_name, table_name):\n",
							"  column_df = spark.sql(\"show columns from \" + database_name + \".\" + table_name)\n",
							"  column_list = column_df.select('col_name').collect()\n",
							"  return column_list\n",
							"\n",
							"def profile_columns(database_name, table_name, column_name):\n",
							"  \n",
							"  sql = 'select ' + \\\n",
							"  \"'\" + database_name + \"'\" + ' as database_name, ' + \\\n",
							"  \"'\" + table_name + \"'\" + ' as table_name, ' + \\\n",
							"  \"'\" + column_name + \"'\" + ' as column_name, ' + \\\n",
							"  column_name + ' as value, ' + \\\n",
							"  'count(*) as num_records, length(' + column_name + ') as len from ' + \\\n",
							"  database_name + '.' + table_name + ' group by ' + column_name\n",
							"  \n",
							"  df = spark.sql(sql)\n",
							"  \n",
							"  df2 = (df.select('database_name', 'table_name', 'column_name', 'num_records', 'value').withColumn('length', length('value')).withColumn('not_null_records', when((col('value').isNull()), \\\n",
							"       lit(0)).otherwise(col('num_records')))) \\\n",
							"      .groupBy('database_name', 'table_name', 'column_name') \\\n",
							"      .agg(sum('num_records').alias(\"total_records\"), \\\n",
							"           countDistinct('value').alias('distinct_values'), \\\n",
							"           min('value').cast(StringType()).alias('min_value'), \\\n",
							"           max('value').cast(StringType()).alias('max_value'), \\\n",
							"           max('length').alias('max_length'), \\\n",
							"           sum('not_null_records').alias('not_null_records'))\n",
							"  #df2.write.format(\"delta\").mode(\"append\").save(\"dbfs:/home/cary.moore@databricks.com/k2g_metadata/tables/profile_data\")\n",
							"  \n",
							"  return df2"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "138c1bbc-031d-403b-b634-a19d331de88b"
							}
						},
						"source": [
							"Create empty schema"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "fd66e7cc-02fc-463b-862e-616939c2f057"
							}
						},
						"source": [
							"from pyspark.sql.types import *\n",
							"\n",
							"data_schema_a = [StructField('database_name', StringType(), True), \\\n",
							"StructField('table_name', StringType(), True), \\\n",
							"StructField('column_name', StringType(), True), \\\n",
							"StructField('total_records', LongType(), True), \\\n",
							"StructField('distinct_values', LongType(), True), \\\n",
							"StructField('min_value', StringType(), True), \\\n",
							"StructField('max_value', StringType(), True), \\\n",
							"StructField('max_length', IntegerType(), True), \\\n",
							"StructField('not_null_records', LongType(), True)]\n",
							"final_struc_a = StructType(fields=data_schema_a)\n",
							"\n",
							"summary_df = spark.createDataFrame([], final_struc_a)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "726362c1-2bc9-472a-b756-41cef7dd5bb5"
							}
						},
						"source": [
							"spark.conf.set(\"spark.sql.shuffle.partitions\", 1000)\n",
							"spark.conf.set(\"spark.sql.adaptive.enabled\", \"true\")\n",
							"spark.conf.set(\"spark.sql.adaptive.coalescePartitions.enabled\",\"true\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bbb0e56e-0159-41ca-86e5-0d2b2a625357"
							}
						},
						"source": [
							"for x in get_databases():\n",
							"  for y in get_tables(x[0]):\n",
							"    cache_sql = 'select * from ' + x[0] + '.' + y[1]\n",
							"    df_cache = spark.sql(cache_sql).cache()\n",
							"    df_cache.count()\n",
							"    for z in get_columns(y[0], y[1]):\n",
							"      try:\n",
							"        return_df = profile_columns(y[0], y[1], z[0])\n",
							"        summary_df = summary_df.union(return_df)\n",
							"        summary_df.count()\n",
							"      except:\n",
							"        print(y[0], y[1], z[0])"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "5fd61f34-a94f-401b-881a-d909732229a2"
							}
						},
						"source": [
							"display(summary_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Model_CDM_Manifest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "a14088e2-720b-435b-a117-7964d35c5ed0"
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkCDMsamplePython')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bbd038d2-6e29-4cd5-8098-c6eb3e469fea"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731\n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\"\n",
							"container = \"powerbicdm\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "797d97b4-54e3-4f78-8da3-20638d7fb352"
							}
						},
						"source": [
							"# Implicit write case\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"# Write a CDM entity with Parquet data files, entity definition is derived from the dataframe schema\n",
							"d = datetime.strptime(\"2015-03-31\", '%Y-%m-%d')\n",
							"ts = datetime.now()\n",
							"data = [\n",
							"  [\"a\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)],\n",
							"  [\"b\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"name\", StringType(), True))\n",
							"  .add(StructField(\"id\", IntegerType(), True))\n",
							"  .add(StructField(\"flag\", BooleanType(), True))\n",
							"  .add(StructField(\"salary\", DoubleType(), True))\n",
							"  .add(StructField(\"phone\", LongType(), True))\n",
							"  .add(StructField(\"dob\", DateType(), True))\n",
							"  .add(StructField(\"time\", TimestampType(), True))\n",
							"  .add(StructField(\"decimal1\", DecimalType(15, 3), True))\n",
							"  .add(StructField(\"decimal2\", DecimalType(38, 7), True))\n",
							"  .add(StructField(\"decimal3\", DecimalType(5, 2), True))\n",
							")\n",
							"\n",
							"df = spark.createDataFrame(spark.sparkContext.parallelize(data), schema)\n",
							"\n",
							"# Creates the CDM manifest and adds the entity to it with gzip'd parquet partitions\n",
							"# with both physical and logical entity definitions \n",
							"(df.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/powerbidataflow/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity2\")\n",
							"  .option(\"format\", \"parquet\")\n",
							"  .option(\"compression\", \"gzip\")\n",
							"  .save())\n",
							"\n",
							"# Append the same dataframe content to the entity in the default CSV format\n",
							"(df.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/powerbidataflow/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity\")\n",
							"  .mode(\"append\")\n",
							"  .save())\n",
							"\n",
							"readDf = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/powerbidataflow/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity\")\n",
							"  .load())\n",
							"\n",
							"readDf.select(\"*\").show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "07b34bbb-0ee7-4151-969e-5198d0ad057a"
							}
						},
						"source": [
							"# Explicit write, creating an entity in a CDM folder based on a pre-defined model \n",
							"\n",
							"# Case 1: Using an entity definition defined in the CDM Github repo\n",
							"\n",
							"data = [\n",
							"  [\"1\", \"2\", \"3\", 4],\n",
							"  [\"4\", \"5\", \"6\", 8],\n",
							"  [\"7\", \"8\", \"9\", 4],\n",
							"  [\"10\", \"11\", \"12\", 8],\n",
							"  [\"13\", \"14\", \"15\", 4]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"teamMembershipId\", StringType(), True))\n",
							"  .add(StructField(\"systemUserId\", StringType(), True))\n",
							"  .add(StructField(\"teamId\", StringType(), True))\n",
							"  .add(StructField(\"versionNumber\", LongType(), True))\n",
							")\n",
							"\n",
							"df = spark.createDataFrame(spark.sparkContext.parallelize(data,1), schema)\n",
							"          \n",
							"(df.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/explicitTest/root.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TeamMembership\")\n",
							"  .option(\"entityDefinitionPath\", \"core/applicationCommon/TeamMembership.cdm.json/TeamMembership\")\n",
							"  .option(\"useCdmStandardModelRoot\", True)  # sets the model root to the CDM CDN schema documents folder\n",
							"  .option(\"useSubManifest\", True)\n",
							"  .mode(\"overwrite\")\n",
							"  .save())\n",
							"\n",
							"readDf = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/explicitTest/root.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TeamMembership\")\n",
							"  .load())\n",
							"          \n",
							"readDf.select(\"*\").show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "630e4726-303e-41c7-9919-b1631e4a9133"
							}
						},
						"source": [
							"# Explicit write, creating an entity in a CDM folder based on a pre-defined model \n",
							"\n",
							"# Case 2: Using an entity definition defined in a CDM model stored in ADLS\n",
							"\n",
							"# UPLOAD CDM FILES FIRST\n",
							"# To run this example, first create a /Models/Contacts folder to your demo container in ADLS gen2,\n",
							"# then upload the provided Contacts.manifest.cdm.json, Person.cdm.json, Entity.cdm.json files\n",
							"\n",
							"birthdate = datetime.strptime(\"1991-03-31\", '%Y-%m-%d')\n",
							"now = datetime.now()\n",
							"data2 = [\n",
							"  [1,now,\"Donna\",\"Carreras\",birthdate],\n",
							"  [2,now,\"Keith\",\"Harris\",birthdate],\n",
							"  [2,now,\"Carla\",\"McGee\",birthdate]\n",
							"]\n",
							"\n",
							"schema2 = (StructType()\n",
							"  .add(StructField(\"identifier\", IntegerType()))\n",
							"  .add(StructField(\"createdTime\", TimestampType()))\n",
							"  .add(StructField(\"firstName\", StringType()))\n",
							"  .add(StructField(\"lastName\", StringType()))\n",
							"  .add(StructField(\"birthDate\", DateType())))\n",
							"\n",
							"# Create the dataframe that matches the CDM definition of the entity, Person\n",
							"df2 = spark.createDataFrame(spark.sparkContext.parallelize(data2, 1), schema2)\n",
							"(df2.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/Data/Contacts/root.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"Person\")\n",
							"  .option(\"entityDefinitionModelRoot\", container + \"/Models\") \n",
							"  .option(\"entityDefinitionPath\", \"/Contacts/Person.cdm.json/Person\")\n",
							"  .mode(\"overwrite\")\n",
							"  .save())\n",
							"\n",
							"readDf2 = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/Data/Contacts/root.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"Person\")\n",
							"  .option(\"entityDefinitionModelRoot\", container + \"/Models\")\n",
							"  .load())\n",
							"\n",
							"readDf2.select(\"*\").show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "e836ce32-507b-406c-a4e9-58a05c8d8670"
							}
						},
						"source": [
							"# Overriding from configPath\n",
							"\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"timestamp1 = datetime.now()\n",
							"timestamp2 = datetime.now()\n",
							"cdata = [\n",
							"  [timestamp1, timestamp2, 1, \"A\", Decimal(33.5)],\n",
							"  [timestamp1, timestamp2, 2, \"B\", Decimal(42.1)],\n",
							"  [timestamp1, timestamp2, 3, \"C\", Decimal(7.90)]\n",
							"]\n",
							"    \n",
							"cschema = (StructType()\n",
							"  .add(StructField(\"ValidFrom\", TimestampType()))\n",
							"  .add(StructField(\"ValidTo\", TimestampType()))\n",
							"  .add(StructField(\"CustomerId\", IntegerType()))\n",
							"  .add(StructField(\"CustomerName\", StringType()))\n",
							"  .add(StructField(\"CreditLimit\", DecimalType(18, 2))))\n",
							"\n",
							"# Create the dataframe\n",
							"customerdf = spark.createDataFrame(spark.sparkContext.parallelize(cdata), cschema)\n",
							"\n",
							"(customerdf.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", outputContainer + \"/customer/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity\")\n",
							"  .option(\"entityDefinitionPath\", \"Customer.cdm.json/Customer\")  # Customer.cdm.json has an alias - \"core\"\n",
							"  .option(\"entityDefinitionModelRoot\", container + \"Models\")   # fetches config.json from this location and finds definition of \"core\" alias, if configPath option is not present\n",
							"  .option(\"configPath\", \"/config\")  # Add your config.json to override the above definition. This will find config.json in container - \"config\"\n",
							"  .option(\"entityDefinitionStorage\", \"<storage1>.dfs.core.windows.net\") # entityDefinitionModelRoot contains in this storage account\n",
							"  .option(\"format\", \"parquet\")\n",
							"  .save())\n",
							"\n",
							"readDf2 = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", outputContainer + \"/customer/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity\")\n",
							"  .load())\n",
							"\n",
							"readDf2.select(\"*\").show()\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "abdb37e8-b4c8-4acc-b5d5-9c600c0d2445"
							}
						},
						"source": [
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"birthdate = datetime.strptime(\"1991-03-31\", '%Y-%m-%d')\n",
							"now = datetime.now()\n",
							"\n",
							"data2 = [\n",
							"  [13, [\"Donna Carreras\", True, 12.34, 63232, birthdate, Decimal(22.7), now, [95110, [\"Bose street\", 321], [['bieber1', 1], ['bieber2', 2]] ]]],\n",
							"  [24, [\"Keith Harris\", True, 12.34, 63234, birthdate, Decimal(22.7), now, [95110, [\"Estancia Dr\", 185], [['baby1', 3], ['baby2', 34], ['baby3', 5], ['baby4', 6]] ]]]\n",
							"]\n",
							"\n",
							"streetSchema = [StructField(\"streetName\", StringType(), True),\n",
							"               StructField(\"streetNumber\", IntegerType(), True)]\n",
							"\n",
							"songSchema = [StructField(\"name\", StringType(), True),\n",
							"               StructField(\"number\", IntegerType(), True)]\n",
							"\n",
							"addressSchema = [StructField(\"zipcode\", StringType(), True),\n",
							"                StructField(\"street\", StructType(streetSchema), True),\n",
							"                StructField(\"songs\", ArrayType(StructType(songSchema)), True)]\n",
							"\n",
							"detailSchema = [StructField(\"name\", StringType(), True),\n",
							"                StructField(\"USCitizen\", BooleanType(), True),\n",
							"                StructField(\"salary\", DoubleType(), True),\n",
							"                StructField(\"phone\", LongType(), True),\n",
							"                StructField(\"birthDate\", DateType(), True),\n",
							"                StructField(\"bodyMassIndex\", DecimalType(5, 2), True),\n",
							"                StructField(\"createdTime\", TimestampType(), True),\n",
							"                StructField(\"address\", StructType(addressSchema), True)]\n",
							"\n",
							"schema = [StructField(\"id\", IntegerType(), True),\n",
							"          StructField(\"details\", StructType(detailSchema), True)]\n",
							"\n",
							"schema2 = StructType(schema)\n",
							"\n",
							"# Create the dataframe\n",
							"df2 = spark.createDataFrame(spark.sparkContext.parallelize(data2), schema2)\n",
							"\n",
							"# Implicit write\n",
							"(df2.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/nestedImplicit/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"NestedExampleImplicit\")\n",
							"  .option(\"format\", \"parquet\")\n",
							"  .save())\n",
							"\n",
							"#Explicit write\n",
							"\n",
							"#To run this example, first create a /Models/Contacts folder to your demo container in ADLS gen2,\n",
							"#then upload the provided NestedExample.cdm.json file\n",
							"(df2.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/nestedExplicit/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"NestedExampleExplicit\")\n",
							"  .option(\"entityDefinitionPath\", \"/Contacts/NestedExample.cdm.json/NestedExample\")\n",
							"  .option(\"entityDefinitionModelRoot\", container + \"/Models\")\n",
							"  .option(\"format\", \"parquet\")\n",
							"  .save())\n",
							"\n",
							"readImplicit = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/nestedImplicit/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"NestedExampleImplicit\")\n",
							"  .load())\n",
							"\n",
							"readExplicit = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/nestedExplicit/default.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"NestedExampleExplicit\")\n",
							"  .load())\n",
							"\n",
							"df2.select(\"*\").show(truncate = False)\n",
							"readImplicit.select(\"*\").show(truncate = False)\n",
							"readExplicit.select(\"*\").show(truncate = False)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Utilities')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "ed50df33-a351-4e60-9ec2-5d620b380f9f"
							}
						},
						"source": [
							"dbutils.fs.mnt(\"\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cdm script')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "f2306db0-e884-45d4-aa60-eea80e2bfc62"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731, \n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\"\n",
							"container = \"pmn-data\"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "dff471ab-2de4-4e63-8dfb-55410029d912"
							}
						},
						"source": [
							"configs = {\"fs.azure.account.auth.type\": \"OAuth\",\n",
							"           \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\n",
							"           \"fs.azure.account.oauth2.client.id\": appid,\n",
							"           \"fs.azure.account.oauth2.client.secret\": appkey,\n",
							"           \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/\"+tenantid+\"/oauth2/token\"}\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9c428b82-2e9c-4039-8b56-2fdc9423c340"
							}
						},
						"source": [
							" dbutils.fs.mount(\n",
							"  source = \"abfss://pmn-data@dlacopdemocomm02.dfs.core.windows.net/\",\n",
							"   mount_point = \"/mnt/pmn-data\",\n",
							"   extra_configs = configs)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c34f6dc8-82b9-4cb5-92c9-8155244cb789"
							}
						},
						"source": [
							"DFSCollection = dbutils.fs.ls(\"/mnt/pmn-data/raw-files/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "bd4757ec-2fb4-423e-bbf3-8e529294f4b9"
							}
						},
						"source": [
							"df=spark.createDataFrame(DFSCollection)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "4aa9147d-4d66-4d50-b74c-75e9bbf20ecc"
							}
						},
						"source": [
							"print(df.name)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "25fe46f6-5b89-4d56-addc-7346b1b11a79"
							}
						},
						"source": [
							"for row in df.collect():\n",
							"  print(row.path)\n",
							"  dfread = spark.read.format('csv').options(header='true').load(row.path)\n",
							"  (dfread.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/business-data/pmn-data.manifest.cdm.json\")\n",
							"  .option(\"entity\", row.name)\n",
							"  .save())"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "40f6491f-5e17-4065-8071-7114dc90d1b5"
							}
						},
						"source": [
							"%fs\n",
							"head dbfs:/mnt/pmd-data/raw-files/*.csv"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "b1fb42de-ba75-40aa-8795-3409756bea1e"
							}
						},
						"source": [
							"df = spark.read.format('csv').options(header='true').load(\"/mnt/pmn-data/raw-files/\"+row.path.split('/')[4])\n",
							"#spark.read.format(\"csv\").option(\"header\", \"true\").load(\"/path/to_csv.csv\") \n",
							"#spark.read.option(\"header\", \"true\").csv(\"/path/to_csv.csv\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d419d09f-4616-4147-ad4a-a2f142ed36c0"
							}
						},
						"source": [
							"# Optionally, you can add <directory-name> to the source URI of your mount point.\n",
							"#dbutils.fs.mount(\n",
							"#  source = \"abfss://power-bi-cdm@dlacopdemocomm02.dfs.core.windows.net/\",\n",
							"#  mount_point = \"/mnt/power-bi-cdm\",\n",
							"#  extra_configs = configs)\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d4fd452d-7127-42d0-98f2-2807544eab07"
							}
						},
						"source": [
							"#dbutils.fs.unmount(\"/mnt/power-bi-cdm\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "cbd9a50d-bd97-4975-8e5b-0c9be49ab776"
							}
						},
						"source": [
							"# Implicit write case\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"# Write a CDM entity with Parquet data files, entity definition is derived from the dataframe schema\n",
							"d = datetime.strptime(\"2015-03-31\", '%Y-%m-%d')\n",
							"ts = datetime.now()\n",
							"data = [\n",
							"  [\"a\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)],\n",
							"  [\"b\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"name\", StringType(), True))\n",
							"  .add(StructField(\"id\", IntegerType(), True))\n",
							"  .add(StructField(\"flag\", BooleanType(), True))\n",
							"  .add(StructField(\"salary\", DoubleType(), True))\n",
							"  .add(StructField(\"phone\", LongType(), True))\n",
							"  .add(StructField(\"dob\", DateType(), True))\n",
							"  .add(StructField(\"time\", TimestampType(), True))\n",
							"  .add(StructField(\"decimal1\", DecimalType(15, 3), True))\n",
							"  .add(StructField(\"decimal2\", DecimalType(38, 7), True))\n",
							"  .add(StructField(\"decimal3\", DecimalType(5, 2), True))\n",
							")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "a9665d0a-f66d-445f-9f92-03d7c44a3c26"
							}
						},
						"source": [
							"df = spark.createDataFrame(spark.sparkContext.parallelize(data), schema)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "634d178c-4a6e-47b7-820e-ce2793c8d216"
							}
						},
						"source": [
							"# Creates the CDM manifest and adds the entity to it with gzip'd parquet partitions\n",
							"# with both physical and logical entity definitions \n",
							"(df.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/business-data/pmn-data.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"pmn-data\")\n",
							"  #.option(\"format\", \"parquet\")\n",
							" # .option(\"compression\", \"gzip\")\n",
							"  .save())\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "aa02432b-086b-44df-8779-c4d0eccb57d2"
							}
						},
						"source": [
							"readDf = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/business-data/pmn-data.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"pmn-data\")\n",
							"  .load())\n",
							"\n",
							"readDf.select(\"*\").show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cdm script_1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "f2306db0-e884-45d4-aa60-eea80e2bfc62"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731, \n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\"\n",
							"container = \"power-bi-cdm\"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "dff471ab-2de4-4e63-8dfb-55410029d912"
							}
						},
						"source": [
							"configs = {\"fs.azure.account.auth.type\": \"OAuth\",\n",
							"           \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\n",
							"           \"fs.azure.account.oauth2.client.id\": appid,\n",
							"           \"fs.azure.account.oauth2.client.secret\": appkey,\n",
							"           \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/\"+tenantid+\"/oauth2/token\"}\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d419d09f-4616-4147-ad4a-a2f142ed36c0"
							}
						},
						"source": [
							"# Optionally, you can add <directory-name> to the source URI of your mount point.\n",
							"#dbutils.fs.mount(\n",
							"#  source = \"abfss://power-bi-cdm@dlacopdemocomm02.dfs.core.windows.net/\",\n",
							"#  mount_point = \"/mnt/power-bi-cdm\",\n",
							"#  extra_configs = configs)\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "d4fd452d-7127-42d0-98f2-2807544eab07"
							}
						},
						"source": [
							"#dbutils.fs.unmount(\"/mnt/power-bi-cdm\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "cbd9a50d-bd97-4975-8e5b-0c9be49ab776"
							}
						},
						"source": [
							"# Implicit write case\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"# Write a CDM entity with Parquet data files, entity definition is derived from the dataframe schema\n",
							"d = datetime.strptime(\"2015-03-31\", '%Y-%m-%d')\n",
							"ts = datetime.now()\n",
							"data = [\n",
							"  [\"a\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)],\n",
							"  [\"b\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"name\", StringType(), True))\n",
							"  .add(StructField(\"id\", IntegerType(), True))\n",
							"  .add(StructField(\"flag\", BooleanType(), True))\n",
							"  .add(StructField(\"salary\", DoubleType(), True))\n",
							"  .add(StructField(\"phone\", LongType(), True))\n",
							"  .add(StructField(\"dob\", DateType(), True))\n",
							"  .add(StructField(\"time\", TimestampType(), True))\n",
							"  .add(StructField(\"decimal1\", DecimalType(15, 3), True))\n",
							"  .add(StructField(\"decimal2\", DecimalType(38, 7), True))\n",
							"  .add(StructField(\"decimal3\", DecimalType(5, 2), True))\n",
							")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "a9665d0a-f66d-445f-9f92-03d7c44a3c26"
							}
						},
						"source": [
							"df = spark.createDataFrame(spark.sparkContext.parallelize(data), schema)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "634d178c-4a6e-47b7-820e-ce2793c8d216"
							}
						},
						"source": [
							"# Creates the CDM manifest and adds the entity to it with gzip'd parquet partitions\n",
							"# with both physical and logical entity definitions \n",
							"(df.write.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/powerbidataflow/test.manifest.cdm.json\")\n",
							"  .option(\"entity\", \"TestEntity\")\n",
							"  .option(\"format\", \"parquet\")\n",
							"  .option(\"compression\", \"gzip\")\n",
							"  .save())\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "aa02432b-086b-44df-8779-c4d0eccb57d2"
							}
						},
						"source": [
							"readDf = (spark.read.format(\"com.microsoft.cdm\")\n",
							"  .option(\"storage\", storageAccountName)\n",
							"  .option(\"manifestPath\", container + \"/powerbi-dataflow/model.json\")\n",
							"  .option(\"entity\", \"Sales Customers\")\n",
							"  .load())\n",
							"\n",
							"display(readDf)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_cdm')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "122cc86e-3460-4c40-a711-f7b0a919c743"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731\n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "706b3798-0541-483e-ab25-ff245c76f069"
							}
						},
						"source": [
							"configs = {\"fs.azure.account.auth.type\": \"OAuth\",\n",
							"           \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\n",
							"           \"fs.azure.account.oauth2.client.id\": appid,\n",
							"           \"fs.azure.account.oauth2.client.secret\": appkey,\n",
							"           \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/\"+tenantid+\"/oauth2/token\"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "f7fad8ee-26c2-4f9a-b541-771d6e05cd53"
							}
						},
						"source": [
							"# Optionally, you can add <directory-name> to the source URI of your mount point.\n",
							"dbutils.fs.mount(\n",
							"  source = \"abfss://powerbicdm@dlacopdemocomm02.dfs.core.windows.net/\",\n",
							"  mount_point = \"/mnt/powerbicdm\",\n",
							"  extra_configs = configs)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "72e4b103-76b3-4cfb-b229-c35348527f32"
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "7da325a3-8ef3-48cd-a141-a4ee80f62ed1"
							}
						},
						"source": [
							"# Implicit write case\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"# Write a CDM entity with Parquet data files, entity definition is derived from the dataframe schema\n",
							"d = datetime.strptime(\"2015-03-31\", '%Y-%m-%d')\n",
							"ts = datetime.now()\n",
							"data = [\n",
							"  [\"a\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)],\n",
							"  [\"b\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"name\", StringType(), True))\n",
							"  .add(StructField(\"id\", IntegerType(), True))\n",
							"  .add(StructField(\"flag\", BooleanType(), True))\n",
							"  .add(StructField(\"salary\", DoubleType(), True))\n",
							"  .add(StructField(\"phone\", LongType(), True))\n",
							"  .add(StructField(\"dob\", DateType(), True))\n",
							"  .add(StructField(\"time\", TimestampType(), True))\n",
							"  .add(StructField(\"decimal1\", DecimalType(15, 3), True))\n",
							"  .add(StructField(\"decimal2\", DecimalType(38, 7), True))\n",
							"  .add(StructField(\"decimal3\", DecimalType(5, 2), True))\n",
							")\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "28221998-65a8-4a4b-a3f0-a95ea7bdbe55"
							}
						},
						"source": [
							"test_df = spark.createDataFrame(data, schema)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c5add7e0-2815-42ed-908d-5158b66e0179"
							}
						},
						"source": [
							"display(test_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9da29f21-edc9-46d6-9c1a-942cadead934"
							}
						},
						"source": [
							"test_df.write.parquet(\"/mnt/powerbicdm/test_pqt\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "f1dd2ec4-fb54-454e-8e1e-678128f71f23"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731\n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "2e794725-a8e4-46c4-800f-75f498e974de"
							}
						},
						"source": [
							"dbutils.fs.ls(\"/mnt/powerbicdm/powerbidataflow\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "aa498fa6-baf8-4d47-9ee7-1bfdad6e3b8c"
							}
						},
						"source": [
							"test_df.write.format(\"com.microsoft.cdm\")\\\n",
							".option(\"storage\", \"dlacopdemocomm02.dfs.core.windows.net\")\\\n",
							".option(\"manifestPath\", \"powerbidataflow/default.manifest.cdm.json\")\\\n",
							".option(\"entity\", \"Test_SparkDF\")\\\n",
							"#.option(\"format\", \"parquet\")\\\n",
							"#.option(\"compression\", \"gzip\")\\\n",
							"#.mode(SaveMode.Append)\\\n",
							".save()\n",
							"#.option(\"entity\", \"permissive\") \n",
							"#.option(\"mode\", \"failfast\")\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "689073e7-c5fe-4b3f-9de7-49d2a0c0deb3"
							}
						},
						"source": [
							"test_df.write.format(\"com.microsoft.cdm\")\\\n",
							".option(\"storage\", \"dlacopdemocomm02.dfs.core.windows.net\")\\\n",
							".option(\"manifestPath\", \"powerbicdm/powerbidataflow/default.manifest.cdm.json\")\\\n",
							".option(\"entity\", \"TestSparkDF\")\\\n",
							".save()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8dd133d2-719f-4812-9e25-39197b4773f7"
							}
						},
						"source": [
							"dbutils.fs.ls(\"abfss://powerbicdm@dlacopdemocomm02.dfs.core.windows.net/powerbidataflow/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_cdm_single')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "122cc86e-3460-4c40-a711-f7b0a919c743"
							}
						},
						"source": [
							"#Specifying appid, appkey and tenanid is optional in spark-cdm-connector-assembly-0.16.jar with Premium Databricks Cluster and Synapse \n",
							"appid = \"0256c781-35ff-4669-94dd-bb33a60b1731\" # Appid- 0256c781-35ff-4669-94dd-bb33a60b1731\n",
							"appkey = \"p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\" # Secret- p7pujO-8E22tr83J6_o4bgN.mJG8c-cq8V\n",
							"tenantid = \"35b69a76-5314-4454-aa0a-35fb0ebd48dc\" #Tenant- 35b69a76-5314-4454-aa0a-35fb0ebd48dc\n",
							"storageAccountName = \"dlacopdemocomm02.dfs.core.windows.net\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "706b3798-0541-483e-ab25-ff245c76f069"
							}
						},
						"source": [
							"configs = {\"fs.azure.account.auth.type\": \"OAuth\",\n",
							"           \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\n",
							"           \"fs.azure.account.oauth2.client.id\": appid,\n",
							"           \"fs.azure.account.oauth2.client.secret\": appkey,\n",
							"           \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/\"+tenantid+\"/oauth2/token\"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "7da325a3-8ef3-48cd-a141-a4ee80f62ed1"
							}
						},
						"source": [
							"\n",
							"# Implicit write case\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions, Row\n",
							"from decimal import Decimal\n",
							"from datetime import datetime\n",
							"\n",
							"# Write a CDM entity with Parquet data files, entity definition is derived from the dataframe schema\n",
							"d = datetime.strptime(\"2015-03-31\", '%Y-%m-%d')\n",
							"ts = datetime.now()\n",
							"data = [\n",
							"  [\"a\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)],\n",
							"  [\"b\", 1, True, 12.34, 6, d, ts, Decimal(1.4337879), Decimal(999.00), Decimal(18.8)]\n",
							"]\n",
							"\n",
							"schema = (StructType()\n",
							"  .add(StructField(\"name\", StringType(), True))\n",
							"  .add(StructField(\"id\", IntegerType(), True))\n",
							"  .add(StructField(\"flag\", BooleanType(), True))\n",
							"  .add(StructField(\"salary\", DoubleType(), True))\n",
							"  .add(StructField(\"phone\", LongType(), True))\n",
							"  .add(StructField(\"dob\", DateType(), True))\n",
							"  .add(StructField(\"time\", TimestampType(), True))\n",
							"  .add(StructField(\"decimal1\", DecimalType(15, 3), True))\n",
							"  .add(StructField(\"decimal2\", DecimalType(38, 7), True))\n",
							"  .add(StructField(\"decimal3\", DecimalType(5, 2), True))\n",
							")\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "28221998-65a8-4a4b-a3f0-a95ea7bdbe55"
							}
						},
						"source": [
							"test_df = spark.createDataFrame(data, schema)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c5add7e0-2815-42ed-908d-5158b66e0179"
							}
						},
						"source": [
							"display(test_df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "6ca46c41-c2e3-45aa-bcd7-7db48f26f6d0"
							}
						},
						"source": [
							"test_df.createTempView(\"my_view\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c024e0b0-13f2-4947-9a51-611c4fca9abf"
							}
						},
						"source": [
							"%scala\n",
							"val test_df_sc = spark.sql(\"select * from my_view\") "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8cbd7d90-eeab-4aaa-a0c2-497ed8f96880"
							}
						},
						"source": [
							"Entity = \"testDf\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "aa498fa6-baf8-4d47-9ee7-1bfdad6e3b8c"
							}
						},
						"source": [
							"test_df.write.format(\"com.microsoft.cdm\")\\\n",
							".option(\"storage\", storageAccountName)\\\n",
							".option(\"manifestPath\", \"/dbfs/powerbicdm/powerbidataflow/default.manifest.cdm.json\")\\\n",
							".option(\"entity\", Entity)\\\n",
							".save()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		}
	]
}